// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication1;

#nullable disable

namespace WebApplication1.Migrations
{
    [DbContext(typeof(DbContext))]
    [Migration("20240515062517_as")]
    partial class @as
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("ClientBucketProduct", b =>
                {
                    b.Property<ulong>("ClientBucketsId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("ProductsId")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("ClientBucketsId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("ClientBucketProduct");
                });

            modelBuilder.Entity("FavouritesBucketProduct", b =>
                {
                    b.Property<ulong>("FavouriteProductsId")
                        .HasColumnType("bigint unsigned");

                    b.Property<long>("FavouritesBucketsId")
                        .HasColumnType("bigint");

                    b.HasKey("FavouriteProductsId", "FavouritesBucketsId");

                    b.HasIndex("FavouritesBucketsId");

                    b.ToTable("FavouritesBucketProduct");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OrderProduct", b =>
                {
                    b.Property<ulong>("OrdersOrderId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("ProductsId")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("OrdersOrderId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("OrderProduct");
                });

            modelBuilder.Entity("OrderStatus", b =>
                {
                    b.Property<ulong>("OrdersOrderId")
                        .HasColumnType("bigint unsigned");

                    b.Property<uint>("StatusesId")
                        .HasColumnType("int unsigned");

                    b.HasKey("OrdersOrderId", "StatusesId");

                    b.HasIndex("StatusesId");

                    b.ToTable("OrderStatus");
                });

            modelBuilder.Entity("WebApplication1.Data.dao.AccountGeolocation", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<ulong>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FullAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("LocalAddress")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("AccountGeolocations");
                });

            modelBuilder.Entity("WebApplication1.Data.dao.BucketCredentials", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("KeyIdentifier")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("BucketCredentials");
                });

            modelBuilder.Entity("WebApplication1.Data.dao.Category", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<ulong>("Id"));

                    b.Property<ulong?>("CategoryId")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("WebApplication1.Data.dao.Client.ClientBucket", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<ulong>("Id"));

                    b.Property<string>("ClientId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("ClientBuckets");
                });

            modelBuilder.Entity("WebApplication1.Data.dao.Client.FavouritesBucket", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ClientId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("FavouritesBuckets");
                });

            modelBuilder.Entity("WebApplication1.Data.dao.Identity.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<ulong?>("GeolocationId")
                        .HasColumnType("bigint unsigned");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<ulong>("OrganizationId")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("GeolocationId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("OrganizationId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("Account");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("WebApplication1.Data.dao.Identity.Organization", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<ulong>("Id"));

                    b.Property<int>("INN")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("WebApplication1.Data.dao.Image", b =>
                {
                    b.Property<string>("Guid")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<ulong?>("ProductId")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("Guid");

                    b.HasIndex("ProductId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("WebApplication1.Data.dao.Order.Order", b =>
                {
                    b.Property<ulong>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<ulong>("OrderId"));

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<uint>("StatusId")
                        .HasColumnType("int unsigned");

                    b.Property<string>("SupplierId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("OrderId");

                    b.HasIndex("ClientId");

                    b.HasIndex("SupplierId");

                    b.ToTable("UserOrders");
                });

            modelBuilder.Entity("WebApplication1.Data.dao.Order.Status", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("WebApplication1.Data.dao.Product.Chars.CharAttributeName", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<ulong>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("CharValues");
                });

            modelBuilder.Entity("WebApplication1.Data.dao.Product.Chars.CharAttributeValue", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<ulong>("Id"));

                    b.Property<ulong>("AttributeNameId")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AttributeNameId");

                    b.ToTable("CharKeys");
                });

            modelBuilder.Entity("WebApplication1.Data.dao.Product.Chars.Characteristics", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<ulong>("Id"));

                    b.Property<ulong>("AttributeNameId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("AttributeValueId")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("Id");

                    b.HasIndex("AttributeNameId");

                    b.HasIndex("AttributeValueId");

                    b.ToTable("Chars");
                });

            modelBuilder.Entity("WebApplication1.Data.dao.Product.Details.Material", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<ulong>("Id"));

                    b.Property<uint>("MeasureId")
                        .HasColumnType("int unsigned");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SupplierId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("MeasureId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Material");
                });

            modelBuilder.Entity("WebApplication1.Data.dao.Product.Details.Measure", b =>
                {
                    b.Property<uint>("MeasureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("MeasureId"));

                    b.Property<string>("MeasureName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("MeasureId");

                    b.ToTable("Measures");
                });

            modelBuilder.Entity("WebApplication1.Data.dao.Product.Product", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<ulong>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SupplierId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("WebApplication1.Data.dao.Product.ProductInfo", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<ulong>("Id"));

                    b.Property<ulong>("CategoryId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong?>("CharacteristicsId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong?>("MaterialId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("ProductId")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CharacteristicsId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("ProductInfo");
                });

            modelBuilder.Entity("WebApplication1.Data.dao.Client.Client", b =>
                {
                    b.HasBaseType("WebApplication1.Data.dao.Identity.Account");

                    b.HasDiscriminator().HasValue("Client");
                });

            modelBuilder.Entity("WebApplication1.Data.dao.Supplier", b =>
                {
                    b.HasBaseType("WebApplication1.Data.dao.Identity.Account");

                    b.Property<float>("Rating")
                        .HasColumnType("float");

                    b.HasDiscriminator().HasValue("Supplier");
                });

            modelBuilder.Entity("ClientBucketProduct", b =>
                {
                    b.HasOne("WebApplication1.Data.dao.Client.ClientBucket", null)
                        .WithMany()
                        .HasForeignKey("ClientBucketsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Data.dao.Product.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FavouritesBucketProduct", b =>
                {
                    b.HasOne("WebApplication1.Data.dao.Product.Product", null)
                        .WithMany()
                        .HasForeignKey("FavouriteProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Data.dao.Client.FavouritesBucket", null)
                        .WithMany()
                        .HasForeignKey("FavouritesBucketsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebApplication1.Data.dao.Identity.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebApplication1.Data.dao.Identity.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Data.dao.Identity.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebApplication1.Data.dao.Identity.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrderProduct", b =>
                {
                    b.HasOne("WebApplication1.Data.dao.Order.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Data.dao.Product.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrderStatus", b =>
                {
                    b.HasOne("WebApplication1.Data.dao.Order.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Data.dao.Order.Status", null)
                        .WithMany()
                        .HasForeignKey("StatusesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication1.Data.dao.Category", b =>
                {
                    b.HasOne("WebApplication1.Data.dao.Category", null)
                        .WithMany("Childs")
                        .HasForeignKey("CategoryId");
                });

            modelBuilder.Entity("WebApplication1.Data.dao.Client.ClientBucket", b =>
                {
                    b.HasOne("WebApplication1.Data.dao.Client.Client", "Client")
                        .WithOne("ClientBucket")
                        .HasForeignKey("WebApplication1.Data.dao.Client.ClientBucket", "ClientId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("WebApplication1.Data.dao.Client.FavouritesBucket", b =>
                {
                    b.HasOne("WebApplication1.Data.dao.Client.Client", "Client")
                        .WithOne("FavouritesBucket")
                        .HasForeignKey("WebApplication1.Data.dao.Client.FavouritesBucket", "ClientId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("WebApplication1.Data.dao.Identity.Account", b =>
                {
                    b.HasOne("WebApplication1.Data.dao.AccountGeolocation", "Geolocation")
                        .WithMany()
                        .HasForeignKey("GeolocationId");

                    b.HasOne("WebApplication1.Data.dao.Identity.Organization", "Organization")
                        .WithMany("Accounts")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Geolocation");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("WebApplication1.Data.dao.Image", b =>
                {
                    b.HasOne("WebApplication1.Data.dao.Product.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebApplication1.Data.dao.Order.Order", b =>
                {
                    b.HasOne("WebApplication1.Data.dao.Client.Client", "Client")
                        .WithMany("Orders")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Data.dao.Supplier", "Supplier")
                        .WithMany("Orders")
                        .HasForeignKey("SupplierId");

                    b.Navigation("Client");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("WebApplication1.Data.dao.Product.Chars.CharAttributeValue", b =>
                {
                    b.HasOne("WebApplication1.Data.dao.Product.Chars.CharAttributeName", "AttributeName")
                        .WithMany("Values")
                        .HasForeignKey("AttributeNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttributeName");
                });

            modelBuilder.Entity("WebApplication1.Data.dao.Product.Chars.Characteristics", b =>
                {
                    b.HasOne("WebApplication1.Data.dao.Product.Chars.CharAttributeName", "AttributeName")
                        .WithMany()
                        .HasForeignKey("AttributeNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Data.dao.Product.Chars.CharAttributeValue", "AttributeValue")
                        .WithMany()
                        .HasForeignKey("AttributeValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttributeName");

                    b.Navigation("AttributeValue");
                });

            modelBuilder.Entity("WebApplication1.Data.dao.Product.Details.Material", b =>
                {
                    b.HasOne("WebApplication1.Data.dao.Product.Details.Measure", "Measure")
                        .WithMany()
                        .HasForeignKey("MeasureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Data.dao.Supplier", null)
                        .WithMany("AvailableMaterials")
                        .HasForeignKey("SupplierId");

                    b.Navigation("Measure");
                });

            modelBuilder.Entity("WebApplication1.Data.dao.Product.Product", b =>
                {
                    b.HasOne("WebApplication1.Data.dao.Supplier", null)
                        .WithMany("SellingProducts")
                        .HasForeignKey("SupplierId");
                });

            modelBuilder.Entity("WebApplication1.Data.dao.Product.ProductInfo", b =>
                {
                    b.HasOne("WebApplication1.Data.dao.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Data.dao.Product.Chars.Characteristics", "Characteristics")
                        .WithMany()
                        .HasForeignKey("CharacteristicsId");

                    b.HasOne("WebApplication1.Data.dao.Product.Details.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId");

                    b.HasOne("WebApplication1.Data.dao.Product.Product", "Product")
                        .WithOne("Info")
                        .HasForeignKey("WebApplication1.Data.dao.Product.ProductInfo", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Characteristics");

                    b.Navigation("Material");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebApplication1.Data.dao.Category", b =>
                {
                    b.Navigation("Childs");
                });

            modelBuilder.Entity("WebApplication1.Data.dao.Identity.Organization", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("WebApplication1.Data.dao.Product.Chars.CharAttributeName", b =>
                {
                    b.Navigation("Values");
                });

            modelBuilder.Entity("WebApplication1.Data.dao.Product.Product", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Info");
                });

            modelBuilder.Entity("WebApplication1.Data.dao.Client.Client", b =>
                {
                    b.Navigation("ClientBucket");

                    b.Navigation("FavouritesBucket");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("WebApplication1.Data.dao.Supplier", b =>
                {
                    b.Navigation("AvailableMaterials");

                    b.Navigation("Orders");

                    b.Navigation("SellingProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
